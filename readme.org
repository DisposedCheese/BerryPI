* Installation
  - Include paths to this folder within your ~/.bashrc file
  - Include required paths for DEFAULT_BIN_PATH and DEFAULT_PYTHON_PATH

* Configuration
  configuration is done through the config.py file.

  currently, the paths for berrypi and for python are hardcoded within
  this file due to the nature of the current users environment. This
  should be changed in later developments to accomodate all users if
  it is a requirement.

  Before running, DEFAULT_BIN_PATH and DEFAULT_PYTHON_PATH values
  within config.py should be set to legitimate values

  DEFAULT_BIN_PATH - should be exactly the same as your BerryPi
  directory root where all of the code is being stored.

  example:

  DEFAULT_BIN_PATH='~/share/BerryPI/'

  DEFAULT_PYTHON_PATH - should be the path to the current python
  distribution.  NOTE: please also include the python command which is
  also being used, with a space. TODO: change this.

  example:   NOTE: the space at the end of python2.7 (this is required) TODO: change this.

  DEFAULT_PYTHON_PATH='/usr/bin/python2.7 '

  for further configuration options when running berrypi, run 

  berrypi -h

  to get a list of prefix options.

* Dependencies
  - WIEN2k (tested against 11.1 Release 05/04/2011)
  - WIEN2WANNIER (tested against 0.92)
  - Python (tested against 2.7.3)
  - NumPy (tested against 1.6.2)
  
* File Descriptions
** berrypi
   The main file to run. It automates the 'entire' berry process
** submoduleProcess.py
   File used for general shell interaction through python.
** parsing.py
   Includes functions for parsing certain wien2k and w2w files. The
   data being parsed from these files is used to calculate the
   information needed
** errorCheck.py
   Includes exception handling and background checks on files. Pretty
   barren right now.
** config.py
   *Important* this file is used to change how the
   berryPyParseAutomation works and needs to be pre-configured on
   first use
** calculations.py
   Includes the necessary classes to carry out the remaining
   calculations at the end of the automation run
* Calculation of the Berry Phase
  - After getting pathphase(x,y,z), obtain each value divided PI Make
    sure that the values are within the [0, 2*PI] ex. -3.2 == 0.8pi
    normalizing
  - sum(values) / num(values)
  - Next, we need to calculate the eletronic polarization in the Z
    direction Pel_z = electron charge(C) / (Volume (m^3 from bohr ^ 3) * berry Phase
    (PI form) * Lattice vector(cz) (Z-direction in metres from bohr)

    NOTE: might need to do a absolute (vector multiplication)

  - Next, we need to calculate the eletronic polarization in the Y
    direction Pel_y = electron charge(C) / (Volume (m^3 from bohr ^ 3) * berry Phase
    (PI form) * Lattice vector (by) (Y-direction in metres from bohr) BR2_DIR in *.outputd

  - etc.... x direction

  - converting from bhor to m^3

  - After we have calculated electron polarization, we calculate ionic
    polarization Pion_z = electron charge(C) / Volume (m^3 from
    bohr) * Lattice Constant (z direction in m from bohr) * (#valence
    electrons in atom 1 * Z direction of atom 1) + ... + (#valence
    electroncs in atoms 1 * Z direction of atom N)

    NOTE: MULT atoms require you do the calculation for that
    iteration * MULT + it's particular coordinates

  - for *.outputst 
    take total charge per spin (1) + total charge per spin (2) - total core-charge for each atom

  - Pion_x, Pion_y....

  - Next, we get the polarization by ionic polarization + the electron polarization
    P_x = Pion_x + Pel_x .... etc
	
* Tutorials
** Tutorial 1 - For Spontaneous polarization calculation
	[[./tutorials/tutorial1]]
** Tutorial 2 - For Born Effective Charges 
	[[./tutorials/tutorial2/]]

* Task list for future versions
** TODO Fix broken links (idk why it's not working) [ ]
** TODO Include fully functional verbose mode [ ]
** TODO Include script to check if all of the correct dependencies are met [ ]
** TODO Remove config.py configuration dictionary functionality (isn't very useful) [ ]
